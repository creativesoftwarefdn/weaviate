addons:
  hosts:
    - db
before_script: ~
branches: 
  only: 
    - master
    - develop
deploy: 
  access_key_id: GOOG4QOEU2HGYSA6CRE6
  acl: public-read
  bucket: weaviate-dist
  detect_encoding: true
  provider: gcs
  secret_access_key: 
    secure: EhYZQtPi22lksyksxWBRJxtqDcnld+CryI9L577cc+VoC8G57P9hWqrPByh22J/3X5iLf1ryNQww68RU2RJTTagPEM11O1eDwvWiso4LF2X+od6cZpwy4+FmQ0XUY7OD/65Ej0E/Hek4v0WL4B9OouWM/x5awO4iHm6ef9EniGw5wlPuqEM9cwiQWVxki8YUyKuJbWkI658eAGYl5xxj1LGQTJuCf/IiWfcQ/R9IV+PruXJ9Alh8DK4RMGDmaqbftTo5aKeidGgX+jef58yY3cgIWyDr5HAr5IFQ1hMpjHWbsl4Hhy1jc3HSS5x9BLbdD76JKHyUpTLk7t+DoM/Jks1bT2bjDBfBAtNK83JorjO95VGOZZs08FOuUylvcp+5dB49OqmAuyYiIAEe6rRK1lyQcaktIXYx30UIklTJnCVdIRu+HNbkzOadz1RlOpN3M7W2Nb5vDYzxLnfUMKJw4G1GCgUyBByNzAUUpTp2jjxR4tnVpHtbXVcWU+wVTCANV7SY41hqIFDTe5mnf8bxL9d2f1xjBsANXl1wONnVbgPZN2XaxNmHR/GvGx0h0dFO/BtYfzMu8LwrUbNKWzuxAa7VuyVfjg6wkJh1bmzP2jsZZiOWFVAlT0++1cWkq9c+oPh6tXYuvnHvvXPRigrf7AEiQss+NnGJJvitXDmo+5w=
  skip_cleanup: true
  true: 
    branch: 
      - master  # Will go to version directory based on version in open api specs
      - develop # Will go to nightly build directory
go: 
  - "1.11"
env:
  - GO111MODULE=on
language: go
install:  
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
before_script:
  - sudo apt-get -qq -y update
  - sudo apt-get -qq -y install jq coreutils curl
  # install GQL prototype deps
  - sudo apt-get install -y nodejs-legacy npm
  - npm install -g nodemon
  # Verify that the code is properly formatted.
  - if [[ -n "$(gofmt -l .)" ]]; then echo "The following files were not formatted properly!"; gofmt -l .; exit 1; fi
  # Run Weaviate backed by JanusGraph
  - tools/test/run_ci_server.sh || travis_terminate 1
script: 
  # Run all tests
  - |
    ./cc-test-reporter before-build
    for pkg in $(go list ./... | grep -v main); do
        if ! go test -race -v -coverprofile=$(echo $pkg | tr / -).cover $pkg; then
          echo "Test for $pkg failed" >&2
          travis_terminate 1
        fi
    done
    echo "mode: set" > c.out
    grep -h -v "^mode:" ./*.cover >> c.out
    rm -f *.cover
    ./cc-test-reporter after-build
  # Create graphql schema from prototype
  - |
    # go to the prototype dir
    cd graphqlapi/prototype
    # install deps
    npm install
    # run nodemon in the background
    nohup node prototype-server.js &
    # get the latest schema and store it to test dir
    # note: introspection used: https://github.com/creativesoftwarefdn/weaviate/blob/develop/docs/graphql_introspection.md
    curl -d '{"query":"{\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","variables":null,"operationName":null}' -H "Content-Type: application/json" -X POST http://localhost:8081/graphql | jq '.' > ../../test/graphql_schema/schema_design.json
    # check if there is a difference in the schema of the prototype and the test schema
    if ! git diff-index --quiet HEAD ../../test/graphql_schema/schema_design.json
    then
      git config --global user.email "travis@travis-ci.org"
      git config --global user.name "Travis CI ðŸ¤–"
      git add . ../../test/graphql_schema/schema_design.json
      git commit --message "ðŸ¤– bleep bloop - auto updated the graphql schema"
      git push --quiet
      echo "there is a difference in the schema's lets commit it back, it will trigger a new Travis build"
      echo "need to stop this build :-("
      travis_terminate 1
    fi
    # kill the proc
    kill $!
    # back to original dir
    cd ../..
after_script:
  # Install goreleaser and create build dirs
  - |
      # If the branch is not master or develop we are done :-)
      if [ $TRAVIS_BRANCH -ne "master" ] && [ $TRAVIS_BRANCH -ne "develop" ]; then
        travis_terminate 0
      fi
      # build binary for GOOS=linux GOARCH=amd64
      # building in PR only happens to validate if binary can be created
      CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./dist/weaviate  -a -tags netgo -ldflags '-w -extldflags "-static"' ./cmd/weaviate-server
      # if not pull request, handle versioning
      if [ $TRAVIS_PULL_REQUEST = "false" ]; then
          # Make distribution dir if not exsists
          mkdir -p dist
          mkdir -p releases
          # if master, upload version nr otherwise nightly
          if [ $TRAVIS_BRANCH = "master" ]; then
              # mv to releases
              mkdir -p releases/$(cat openapi-specs/schema.json | jq -r '.info.version')
              mv ./dist/weaviate ./releases/$(cat openapi-specs/schema.json | jq -r '.info.version')/weaviate
              # Create txt file with version number
              echo $(cat openapi-specs/schema.json | jq -r '.info.version') > releases/latest.master.txt
              # Check if the version number is now, if not, kill and fail the process
              if [[ `wget -S --spider https://storage.googleapis.com/weaviate-dist/releases/$(cat openapi-specs/schema.json | jq -r '.info.version')/config.yaml 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
                  echo "ERROR - This version is already released, master build will fail! Increate version number in OPENAPI schema file"
                  exit 1
              fi
          fi
          if [ $TRAVIS_BRANCH = "develop" ]; then
              # if develop, create nightly
              mkdir -p releases/nightly
              mv ./dist/weaviate ./releases/nightly/weaviate
              # Create txt file with version number of nightly build
              echo $(cat openapi-specs/schema.json | jq -r '.info.version') > releases/latest.nightly.txt
          fi
          # remove all except for releases
          rm -r !(releases)
      fi
services: 
  - docker
sudo: required
