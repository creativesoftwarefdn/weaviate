/*                          _       _
 *__      _____  __ ___   ___  __ _| |_ ___
 *\ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
 * \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
 *  \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
 *
 * Copyright Â© 2016 - 2019 Weaviate. All rights reserved.
 * LICENSE: https://github.com/creativesoftwarefdn/weaviate/blob/develop/LICENSE.md
 * DESIGN & CONCEPT: Bob van Luijt (@bobvanluijt)
 * CONTACT: hello@creativesoftwarefdn.org
 */ // Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// C11yCorpusResponse An array of available words and contexts.
// swagger:model C11yCorpusResponse
type C11yCorpusResponse struct {

	// corpus
	Corpus *C11yCorpusResponseCorpus `json:"corpus,omitempty"`
}

// Validate validates this c11y corpus response
func (m *C11yCorpusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorpus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *C11yCorpusResponse) validateCorpus(formats strfmt.Registry) error {

	if swag.IsZero(m.Corpus) { // not required
		return nil
	}

	if m.Corpus != nil {
		if err := m.Corpus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("corpus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *C11yCorpusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *C11yCorpusResponse) UnmarshalBinary(b []byte) error {
	var res C11yCorpusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// C11yCorpusResponseCorpus Weighted results for all words
// swagger:model C11yCorpusResponseCorpus
type C11yCorpusResponseCorpus struct {

	// corpus
	Corpus string `json:"corpus,omitempty"`

	// corpus nearest neighbors
	CorpusNearestNeighbors C11yNearestNeighbors `json:"corpusNearestNeighbors,omitempty"`

	// corpus vector
	CorpusVector C11yVector `json:"corpusVector,omitempty"`

	// single words
	SingleWords []string `json:"singleWords"`
}

// Validate validates this c11y corpus response corpus
func (m *C11yCorpusResponseCorpus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorpusNearestNeighbors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorpusVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *C11yCorpusResponseCorpus) validateCorpusNearestNeighbors(formats strfmt.Registry) error {

	if swag.IsZero(m.CorpusNearestNeighbors) { // not required
		return nil
	}

	if err := m.CorpusNearestNeighbors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("corpus" + "." + "corpusNearestNeighbors")
		}
		return err
	}

	return nil
}

func (m *C11yCorpusResponseCorpus) validateCorpusVector(formats strfmt.Registry) error {

	if swag.IsZero(m.CorpusVector) { // not required
		return nil
	}

	if err := m.CorpusVector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("corpus" + "." + "corpusVector")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *C11yCorpusResponseCorpus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *C11yCorpusResponseCorpus) UnmarshalBinary(b []byte) error {
	var res C11yCorpusResponseCorpus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
